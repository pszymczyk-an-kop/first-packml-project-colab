<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fbXYMoverEM" Id="{542faac4-2fc2-4de1-969d-21d2b14af459}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbXYMoverEM EXTENDS fbEM
VAR_IN_OUT
END_VAR
VAR
	F_Reset : BOOL := TRUE;
	fbSignalSim: fbSignalSimXYMover;
END_VAR
VAR RETAIN
	XYMoverActualStep : INT;
	RecoveryStep: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[GetUnCmd();
fbSignalSim(
	em := em,
	EnableSim := EnableSim,
	CmdSim := CmdSim
);

IF em.Config.Functionality = E_Function.eXYMover THEN
            IF XYMoverActualStep <> 2 AND XYMoverActualStep <> 3 AND XYMoverActualStep <> 4 AND em.Cmd = E_Cmd.STOP THEN
                   XYMoverActualStep := 1;
            END_IF
            IF XYMoverActualStep <> 6 AND XYMoverActualStep <> 7 AND XYMoverActualStep <> 2 AND XYMoverActualStep <> 3 AND XYMoverActualStep <> 4 AND em.Cmd = E_Cmd.ABORT THEN
                   XYMoverActualStep := 5;
           	END_IF
			IF XYMoverActualStep <> 1 AND XYMoverActualStep <> 2 THEN
				XYMoverActualStep := RecoveryStep;
			END_IF

CASE XYMoverActualStep OF
	
	0: 		IF em.Config.Data.I[3] AND em.Config.Data.I[1] THEN
                  em.Status := E_Status.IDLE;
                  XYMoverActualStep := 10;
            ELSE 
                  em.Status := E_Status.UNDEFINED;
                  XYMoverActualStep := 2;
            END_IF
            
	1:      em.Status := E_Status.stopping;
            em.Config.Data.Q[1] := FALSE;
            em.Config.Data.Q[2] := FALSE;
            em.Config.Data.Q[3] := FALSE;
            em.Config.Data.Q[4] := FALSE;
            XYMoverActualStep := 2;
                        
	2:		em.Status := E_Status.stopped; 
            XYMoverActualStep := 3;
            
	3:  	IF em.Cmd = E_CMD.reset THEN
                 em.Status := E_Status.resetting;
                 em.Config.Data.Q[1] := TRUE;
                 em.Config.Data.Q[3] := TRUE;
                 XYMoverActualStep := 4;
            END_IF
                        
	4:      IF em.Config.Data.I[3] AND em.Config.Data.I[1] THEN
                 XYMoverActualStep := 0;
            END_IF
                           
	5:      em.Status := E_Status.aborting;
            em.Config.Data.Q[1] := FALSE;
            em.Config.Data.Q[2] := FALSE;
            em.Config.Data.Q[3] := FALSE;
            em.Config.Data.Q[4] := FALSE;
            XYMoverActualStep := 6;
			
	6:		em.Status := E_Status.aborted; 
            XYMoverActualStep := 7;
                        
	7:      IF em.Cmd = E_CMD.clear THEN
                em.Status := E_Status.clearing;
                XYMoverActualStep := 2;
            END_IF
                                                                                              
	10:		IF em.Cmd = E_Cmd.START THEN
                em.Status := E_Status.STARTING;
                XYMoverActualStep := 20;
            END_IF

	20:		em.Status := E_Status.EXECUTE;
			IF em.Config.Data.I[5] = TRUE THEN
                XYMoverActualStep := 30; 
            END_IF

	30:		em.Config.Data.Q[1] := FALSE;
            em.Config.Data.Q[2] := TRUE;
			IF em.Config.Data.I[2] = TRUE AND em.Config.Data.I[1] = FALSE THEN
           		XYMoverActualStep := 40;
			END_IF
            
	40:  
			em.Config.Data.Q[3] := FALSE;
			em.Config.Data.Q[4] := TRUE;
			IF em.Config.Data.I[4] = TRUE AND em.Config.Data.I[3] = FALSE THEN
				XYMoverActualStep := 50;
			END_IF
                        
	50:
            IF em.Config.Data.I[4] = TRUE THEN
                XYMoverActualStep := 60; 
            END_IF 
            
	60: 	IF em.Config.Data.I[5] = FALSE THEN
            	XYMoverActualStep := 70; 
            END_IF 
            
	70: 	em.Config.Data.Q[2] := FALSE;
			em.Config.Data.Q[4] := FALSE;
			em.Config.Data.Q[3] := TRUE;
            em.Config.Data.Q[1] := TRUE;
			IF em.Config.Data.I[1] = TRUE AND em.Config.Data.I[2] = FALSE AND em.Config.Data.I[3] = TRUE AND em.Config.Data.I[4] = FALSE THEN
				XYMoverActualStep := 20;
			END_IF
                        
END_CASE
END_IF
em.SequenceStep := XYMoverActualStep;
]]></ST>
    </Implementation>
    <LineIds Name="fbXYMoverEM">
      <LineId Id="269" Count="0" />
      <LineId Id="281" Count="1" />
      <LineId Id="285" Count="1" />
      <LineId Id="280" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="148" Count="7" />
      <LineId Id="325" Count="1" />
      <LineId Id="156" Count="1" />
      <LineId Id="248" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="160" Count="7" />
      <LineId Id="169" Count="6" />
      <LineId Id="177" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="182" Count="9" />
      <LineId Id="193" Count="0" />
      <LineId Id="195" Count="4" />
      <LineId Id="323" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="200" Count="1" />
      <LineId Id="203" Count="4" />
      <LineId Id="209" Count="4" />
      <LineId Id="302" Count="0" />
      <LineId Id="216" Count="3" />
      <LineId Id="221" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="223" Count="1" />
      <LineId Id="226" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="228" Count="8" />
      <LineId Id="238" Count="3" />
      <LineId Id="301" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="308" Count="1" />
      <LineId Id="307" Count="0" />
      <LineId Id="244" Count="3" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>