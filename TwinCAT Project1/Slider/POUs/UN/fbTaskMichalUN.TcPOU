<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fbTaskMichalUN" Id="{4ceb2965-fcc1-481b-8b35-1b2a977008a3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbTaskMichalUN EXTENDS fbUN
VAR	
	// Arrays with 'em' universal structure and 'fbEM' containing ST_MACHINE structure which contains of references to fbEM function block
	em : ARRAY[1..Counters.packmlEmLast] OF ST_EM;
	fbEM : ARRAY[1..Counters.packmlEmLast] OF ST_MACHINE;
	
	// Array containing all instances fo fbSliderEM with its own iterator
	SliderEM : ARRAY[1..Counters.SliderEMNo] OF fbSliderEM;
	iSliderEM : DINT := 1;
	
	// Array containing all instances fo fbSliderWithGripperEM with its own iterator
	SliderWithGripperEM : ARRAY[1..Counters.SliderWithGripperEMNo] OF fbSliderWithGripperEM;
	iSliderWithGripperEM : DINT := 1;
	
	// Array containing all instances fo fbXYMoverEM with its own iterator
	XYMoverEM : ARRAY[1..Counters.XYMoverEMNo] OF fbXYMoverEM;
	iXYMoverEM : DINT := 1;
	
	SignalSimSliderWithGripper :fbSignalSimSliderWithGripper; 
	SignalSimSlider: fbSignalSimSlider;
	SignalSimXYMover : fbSignalSimXYMover;
	initEnable: BOOL := TRUE;
	i : DINT;
	State : INT;
	declareIterator: DINT;
	initIterator: DINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*IF __ISVALIDREF(fbEM[1].fbEM) THEN <----really cool function. validates refference
fbEM[1].fbEM(em := em[1], un := testUN);
END_IF; *)
//fbEM[2].fbEM(em := em[2], un := testUN);
//fbEM[3].fbEM(em := em[3], un := testUN);
//fbEM[4].fbEM(em := em[4], un := testUN);  

IF initEnable THEN 
{region "INIT"} 
// Specifing module type of each module in array
em[1].Config.Functionality := E_Function.eSliderWithGripper;
em[2].Config.Functionality := E_Function.eXYMover;
em[3].Config.Functionality := E_Function.eXYMover;
em[4].Config.Functionality := E_Function.eSlider;


// FOR loop to specify config for each module
FOR declareIterator := 1 TO Counters.packmlEmLast DO
	em[declareIterator].Config.Data.I REF= GVL.aInput[declareIterator];
	em[declareIterator].Config.Data.Q REF= GVL.aOutput[declareIterator];

	CASE em[declareIterator].Config.Functionality OF
		E_Function.eSlider:
			fbEM[declareIterator].fbEM REF= SliderEM[iSliderEM];
			iSliderEM := iSliderEM + 1;
		E_Function.eSliderWithGripper:
			fbEM[declareIterator].fbEM REF= SliderWithGripperEM[iSliderWithGripperEM];
			iSliderWithGripperEM := iSliderWithGripperEM + 1;
		E_Function.eXYMover:
			fbEM[declareIterator].fbEM REF= XYMoverEM[iXYMoverEM];
			iXYMoverEM := iXYMoverEM + 1;
	END_CASE
END_FOR
	
	(*FOR initIterator := 1 TO Counters.packmlEmLast DO
		fbEM[initIterator].fbEM(em := em[initIterator], un := testUN);
	END_FOR*)

	initEnable:=FALSE;
END_IF
	 

// ENABLE SIGNAL SIM FOR ALL EMs
SignalSimSliderWithGripper(em := em[1], EnableSim := TRUE);
SignalSimXYMover (em := em[2], EnableSim := TRUE);
SignalSimXYMover (em := em[3], EnableSim := TRUE);
SignalSimSlider (em := em[4], EnableSim := TRUE);

fbEM[1].fbEM(em := em[1], un := testUN);
fbEM[2].fbEM(em := em[2], un := testUN);
fbEM[3].fbEM(em := em[3], un := testUN);
fbEM[4].fbEM(em := em[4], un := testUN);
{endregion};










]]></ST>
    </Implementation>
    <LineIds Name="fbTaskMichalUN">
      <LineId Id="170" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="171" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="75" Count="26" />
      <LineId Id="74" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="55" Count="4" />
      <LineId Id="187" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="195" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="9" />
      <LineId Id="41" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>