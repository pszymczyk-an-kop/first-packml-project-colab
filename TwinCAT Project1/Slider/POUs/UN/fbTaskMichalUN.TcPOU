<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fbTaskMichalUN" Id="{6ca8a344-0c0d-4dec-94ed-d32b94b1d431}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbTaskMichalUN EXTENDS fbUN
VAR
	// Arrays with 'em' universal structure and 'fbEM' containing ST_MACHINE structure which contains of references to fbEM function block
	em : ARRAY[1..Counters.packmlEmLast] OF ST_EM;
	fbEM : ARRAY[1..Counters.packmlEmLast] OF ST_MACHINE;
	
	// Array containing all instances fo fbSliderEM with its own iterator
	SliderEM : ARRAY[1..Counters.SliderEMNo] OF fbSliderEM;
	iSliderEM : DINT := 1;
	
	// Array containing all instances fo fbSliderWithGripperEM with its own iterator
	SliderWithGripperEM : ARRAY[1..Counters.SliderWithGripperEMNo] OF fbSliderWithGripperEM;
	iSliderWithGripperEM : DINT := 1;
	
	// Array containing all instances fo fbXYMoverEM with its own iterator
	XYMoverEM : ARRAY[1..Counters.XYMoverEMNo] OF fbXYMoverEM;
	iXYMoverEM : DINT := 1;
	
	i : DINT;
	State : INT := 0;
	StoppedState : INT := 0;
	declareIterator : DINT;
	moduleWorkIterator : DINT;
	initialConfig: BOOL := TRUE;
	x: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// fbEM and em array number:
// 1 <- SliderWithGripper
// 2 <- XYMover_1
// 3 <- XYMover_2
// 4 <- Slider


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// All init configuration done here
IF initialConfig THEN
	initialConfig := FALSE;
	// Specifing module type of each module in array
	em[1].Config.Functionality := E_Function.eSliderWithGripper;
	em[2].Config.Functionality := E_Function.eXYMover;
	em[3].Config.Functionality := E_Function.eXYMover;
	em[4].Config.Functionality := E_Function.eSlider;
	// 1-ready to takeObject / 0-not ready to takeObject
	em[1].Config.Data.takeObject:= 1;
	em[2].Config.Data.takeObject:= 1;
	em[3].Config.Data.takeObject:= 1;
	em[4].Config.Data.takeObject:= 1;
		
	// FOR loop to specify config for each module
	FOR declareIterator := 1 TO Counters.packmlEmLast DO
		em[declareIterator].Config.Data.I REF= GVL.aInput[declareIterator];
		em[declareIterator].Config.Data.Q REF= GVL.aOutput[declareIterator];

		CASE em[declareIterator].Config.Functionality OF
			E_Function.eSlider:
				fbEM[declareIterator].fbEM REF= SliderEM[iSliderEM];
				iSliderEM := iSliderEM + 1;
			E_Function.eSliderWithGripper:
				fbEM[declareIterator].fbEM REF= SliderWithGripperEM[iSliderWithGripperEM];
				iSliderWithGripperEM := iSliderWithGripperEM + 1;
			E_Function.eXYMover:
				fbEM[declareIterator].fbEM REF= XYMoverEM[iXYMoverEM];
				iXYMoverEM := iXYMoverEM + 1;
		END_CASE
	END_FOR
END_IF

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Modules work loop (idk yet if is better to have it at the beggining or bottom of UN)
FOR moduleWorkIterator := 1 TO Counters.packmlEmLast DO
	fbEM[moduleWorkIterator].fbEM(em := em[moduleWorkIterator], un := un, EnableSim := EnableSim, CmdSim := FALSE);
END_FOR

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF cell.Cmd = E_CMD_CELL.STOP AND State < 2000 THEN
	StoppedState := State;
	State := 2000;
END_IF

IF cell.Cmd = E_CMD_CELL.ABORT AND State < 1000 THEN
	State := 1000;
END_IF

CASE State OF
	0:	un.Status := E_Status.undefined;
		em[1].Config.Data.pick_pos := 1;

		State := 5;
	
	5:	// Waiting for every EM to become idle state
		FOR i := 1 TO Counters.packmlEmLast DO
			IF NOT (em[i].Status = E_Status.idle) THEN
				un.Cmd := E_CMD.reset;
				RETURN;
			END_IF
		END_FOR
		un.Status := E_Status.idle;
		State := 10;
	
	10:	IF cell.Cmd = E_CMD_CELL.START THEN
			un.Cmd := E_CMD.start;
			un.Status := E_Status.starting;
			State := 20;
		END_IF
	
	20:	// Waiting for every EM to be in execute or starting state
		FOR i := 1 TO Counters.packmlEmLast DO
			IF NOT (em[i].Status = E_Status.execute OR em[i].Status = E_Status.starting) THEN
				RETURN;
			END_IF
		END_FOR
		State := 30;
		
	30:	// Start of my specific task (all modules stays in execute)
		// input -> SWG 
		IF (em[1].SequenceStep = 40		// SWG
		AND cell.PlaceObject[1]) 			// Object input signal
		AND em[2].Config.Data.takeObject	// XY_1	
		THEN
			em[1].Config.Data.takeObject:= FALSE;
			em[1].Config.Data.drop_pos := 200;
			cell.PlaceObject[1] := FALSE;
			em[1].Config.Data.I[3] := TRUE;  //obj at SWG beginning
			State := 40;
		
		END_IF
		
		IF StoppedState <> 0 AND StoppedState < 1000 THEN
			State := StoppedState;
			StoppedState := 0;
		END_IF
		
	40:	// SWG -> XY_1 
		IF em[1].SequenceStep = 43		// SWG
		AND em[2].SequenceStep = 20		// XY_1
		THEN
			em[1].Config.Data.takeObject:= TRUE;
			em[2].Config.Data.takeObject:= FALSE;
			em[1].Config.Data.I[3] := FALSE;
			em[2].Config.Data.I[5] := TRUE;
			State := 50;
		END_IF
		
	50: // input -> SWG 
		IF (em[1].SequenceStep = 40		// SWG
		AND cell.PlaceObject[1]) 			// Object input signal
		AND em[3].Config.Data.takeObject // XY_2
		THEN
			em[1].Config.Data.takeObject:= FALSE;
			em[1].Config.Data.drop_pos := 999;
			cell.PlaceObject[1] := FALSE;
			em[1].Config.Data.I[3] := TRUE;  //obj at SWG beginning
			State := 60;
		END_IF



		
		
	60: // SWG -> XY2 
		IF em[1].SequenceStep = 43		// SWG
		AND em[3].SequenceStep = 20		// XY2
		THEN
			em[1].Config.Data.takeObject:= TRUE;
			em[3].Config.Data.takeObject:= FALSE;
			em[1].Config.Data.I[3] := FALSE;
			em[3].Config.Data.I[5] := TRUE;
			
			State := 70;
		END_IF
		
	70:	// XY_1 AND XY_2  -> S1
		IF em[2].SequenceStep = 60		// XY_1
		AND em[3].SequenceStep = 60		// XY_2
		THEN
			em[2].Config.Data.takeObject:= TRUE;	// xy_1 free
			em[3].Config.Data.takeObject:= TRUE;	// xy_2 free
			em[4].Config.Data.takeObject:= FALSE;   // s1 occupied
			em[4].Config.Data.I[3] := TRUE;			// s1
			em[2].Config.Data.I[5] := FALSE;		//xy_1
			em[3].Config.Data.I[5] := FALSE;		//xy_2
			State := 80;
		END_IF
		
	
		
	80:	// S1 -> output
		IF em[4].SequenceStep = 70 THEN
			em[4].Config.Data.takeObject:= TRUE;
			em[4].Config.Data.I[3] := FALSE;
			State := 30;
		END_IF
		
	1000:
		un.Cmd := E_CMD.abort;
		un.Status := E_Status.aborting;
		FOR i := 1 TO Counters.packmlEmLast DO
			IF NOT (em[i].Status = E_Status.aborted) THEN
				RETURN;
			END_IF
		END_FOR
		State := 1010;
	
	1010:
		IF cell.Cmd = E_CMD_CELL.START THEN
			un.Cmd := E_CMD.clear;
			State := 2000;
		END_IF

	2000:
		un.Cmd := E_CMD.stop;
		un.Status := E_Status.stopping;
		FOR i := 1 TO Counters.packmlEmLast DO
			IF em[i].Status <> E_Status.stopped THEN
				RETURN;
			END_IF
		END_FOR
		un.Status := E_Status.stopped;
		State := 2010;
	
	2010:
		IF cell.Cmd = E_CMD_CELL.START THEN
			State := 5;
		END_IF	
END_CASE























]]></ST>
    </Implementation>
    <LineIds Name="fbTaskMichalUN">
      <LineId Id="31" Count="1" />
      <LineId Id="35" Count="3" />
      <LineId Id="497" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="439" Count="3" />
      <LineId Id="515" Count="0" />
      <LineId Id="836" Count="2" />
      <LineId Id="444" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="445" Count="14" />
      <LineId Id="462" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="526" Count="2" />
      <LineId Id="262" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="714" Count="8" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="808" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="433" Count="1" />
      <LineId Id="118" Count="1" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="539" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="533" Count="2" />
      <LineId Id="540" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="795" Count="0" />
      <LineId Id="628" Count="0" />
      <LineId Id="811" Count="0" />
      <LineId Id="797" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="601" Count="0" />
      <LineId Id="814" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="694" Count="1" />
      <LineId Id="752" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="697" Count="0" />
      <LineId Id="602" Count="2" />
      <LineId Id="629" Count="1" />
      <LineId Id="812" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="607" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="606" Count="0" />
      <LineId Id="612" Count="1" />
      <LineId Id="820" Count="2" />
      <LineId Id="827" Count="0" />
      <LineId Id="823" Count="3" />
      <LineId Id="614" Count="0" />
      <LineId Id="816" Count="3" />
      <LineId Id="616" Count="0" />
      <LineId Id="621" Count="1" />
      <LineId Id="828" Count="0" />
      <LineId Id="634" Count="1" />
      <LineId Id="830" Count="1" />
      <LineId Id="625" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="678" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="638" Count="1" />
      <LineId Id="648" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="833" Count="2" />
      <LineId Id="641" Count="0" />
      <LineId Id="644" Count="0" />
      <LineId Id="832" Count="0" />
      <LineId Id="645" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="657" Count="0" />
      <LineId Id="660" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="685" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="672" Count="0" />
      <LineId Id="671" Count="0" />
      <LineId Id="753" Count="0" />
      <LineId Id="755" Count="13" />
      <LineId Id="754" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="610" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="566" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="724" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="701" Count="2" />
      <LineId Id="144" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="148" Count="18" />
      <LineId Id="40" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>